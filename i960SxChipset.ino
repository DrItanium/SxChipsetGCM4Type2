/*
i960SxChipset
Copyright (c) 2020-2021, Joshua Scoggins
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR 
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/// i960Sx chipset mcu, based on atmega1284p with fuses set for:
/// - 20Mhz crystal
/// - D1 acts as CLKO
/// Language options:
/// - C++17
/// Board Platform: MightyCore
#include <SPI.h>
#include <Wire.h>
#include <libbonuspin.h>
#include <Timer.h>
#include <SD.h>
#include <Arduino_JSON.h>
#include <Adafruit_GFX.h>
#include "Fsm.h"
template<typename T>
class TreatAs final {
	public:
		using ReturnType = T;
};
using Address = uint32_t;
using Short = uint16_t;
using BusDatum = Short;
using Byte = uint8_t;
using TreatAsByte = TreatAs<uint8_t>;
using TreatAsShort = TreatAs<uint16_t>;
using TreatAsWord = TreatAs<uint32_t>;
constexpr auto onBoardCacheSize = 16 / sizeof(Short);
volatile Short onBoardCache[onBoardCacheSize] = { 0 };

enum class i960Pinout : decltype(A0) {
// PORT B
	Led = 0, 	  // output
   	CLOCK_OUT, // output, unusable
	AS_,     // input, AVR Int2
	PWM4,	    // Unused 
	GPIOSelect, // output
	MOSI,		  // reserved
	MISO,		  // reserved
	SCK, 		  // reserved
// PORT D
	RX0, 		  // reserved
	TX0, 		  // reserved
	AVR_INT0,	  // AVR Interrupt INT0
	AVR_INT1,	  // AVR Interrupt INT1
	PWM0,		  // unused
	PWM1, 		  // unused
	PWM2, 		  // unused
	PWM3, 		  // unused
// PORT C
	SCL,		  // reserved
	SDA, 		  // reserved
	Ready, 	  // output
	Int0_,		  // output
	W_R_, 		  // input
	Reset960,		  // output
	BLAST_, 	 // input
	DEN_, 	     // input
// PORT A
	Analog0,	  // unused
	Analog1,	  // unused
	Analog2, 	  // unused
	Analog3, 	  // unused
	Analog4,	  // unused
	Analog5,	  // unused
	Analog6,	  // unused
	Analog7,	  // unused
	Count,		   // special
};
static_assert(static_cast<decltype(HIGH)>(i960Pinout::Count) <= 32);

enum class IOExpanderAddress : byte {
	DataLines = 0b000,
	Lower16Lines,
	Upper16Lines,
	MemoryCommitExtras,
	OtherDevice0,
	OtherDevice1,
	OtherDevice2,
	OtherDevice3,
};

/**
 * Normally generated by the linker as the value used for validation purposes
 * on system bootup. Since we are on a microcontroller, this can be done
 * dynamically. This is taken from start.ld in the SA/SB Reference manual's
 * Appendix D.
 */
constexpr auto computeCS1(uint32_t satPtr, uint32_t pcrbPtr, uint32_t startIP) noexcept {
	return - (satPtr + pcrbPtr + startIP);
}

template<IOExpanderAddress addr, int enablePin = static_cast<int>(i960Pinout::GPIOSelect)>
using IOExpander = bonuspin::MCP23S17<static_cast<int>(addr), enablePin>;

inline void digitalWrite(i960Pinout ip, decltype(HIGH) value) {
	digitalWrite(static_cast<int>(ip), value);
}

inline void pinMode(i960Pinout ip, decltype(INPUT) value) {
	pinMode(static_cast<int>(ip), value);
}

template<typename ... Pins>
void setupPins(decltype(OUTPUT) direction, Pins ... pins) {
	(pinMode(pins, direction), ...);
}

template<typename ... Pins>
void digitalWriteBlock(decltype(HIGH) value, Pins ... pins) {
	(digitalWrite(pins, value), ...);
}

template<i960Pinout pinId, decltype(HIGH) onConstruction, decltype(LOW) onDestruction>
class PinToggler {
	public:
		PinToggler() { digitalWrite(pinId, onConstruction); }
		~PinToggler() { digitalWrite(pinId, onDestruction); }
};

inline auto digitalRead(i960Pinout ip) {
	return digitalRead(static_cast<int>(ip));
}
template<i960Pinout pinId>
using HoldPinLow = PinToggler<pinId, LOW, HIGH>;

template<i960Pinout pinId>
using HoldPinHigh = PinToggler<pinId, HIGH, LOW>;

// 8 IOExpanders to a single enable line for SPI purposes 
// 4 of them are reserved
IOExpander<IOExpanderAddress::DataLines> dataLines;
IOExpander<IOExpanderAddress::Lower16Lines> lower16;
IOExpander<IOExpanderAddress::Upper16Lines> upper16;
IOExpander<IOExpanderAddress::MemoryCommitExtras> extraMemoryCommit;

Timer t;

Address
getAddress() noexcept {
	auto lower16Addr = static_cast<Address>(lower16.readGPIOs());
	auto upper16Addr = static_cast<Address>(upper16.readGPIOs()) << 16;
	return lower16Addr | upper16Addr;
}
uint16_t
getDataBits() noexcept {
	dataLines.writeGPIOsDirection(0xFFFF);
	return static_cast<uint16_t>(dataLines.readGPIOs());
}

void
setDataBits(uint16_t value) noexcept {
	dataLines.writeGPIOsDirection(0);
	dataLines.writeGPIOs(value);
}


// layout of the extra memory commit expander
// PA0 - BurstAddress1 - input
// PA1 - BurstAddress2 - input
// PA2 - BurstAddress3 - input
// PA3 - BE0_ - input
// PA4 - BE1_ - input
// PB0 - HOLD  - output
// PB1 - HLDA  - input 
// PB2 - _LOCK - output
// PB3 - Unused
// PB4 - Unused
// PB5 - Unused
// PB6 - Unused
// PB7 - Unused

uint8_t getByteEnableBits() noexcept {
	return (extraMemoryCommit.readGPIOs() & 0b11000) >> 3;
}

auto getByteEnable0() noexcept {
	return (getByteEnableBits() & 1) == 0 ? LOW : HIGH;
}
auto getByteEnable1() noexcept {
	return (getByteEnableBits() & 0b10) == 0 ? LOW : HIGH;
}

uint8_t getBurstAddressBits() noexcept {
	return (extraMemoryCommit.readGPIOs() & 0b111) << 1;
}

constexpr Address getBurstAddress(Address base, Address burstBits) noexcept {
	return (base & (~0b1110)) | burstBits;
}
Address getBurstAddress(Address base) noexcept {
	return getBurstAddress(base, static_cast<Address>(getBurstAddressBits()));
}
Address getBurstAddress() noexcept {
	return getBurstAddress(getAddress());
}


auto getDataEnable() noexcept {
	return (extraMemoryCommit.readGPIOs() & 0b100000) == 0 ? LOW : HIGH;
}

bool addressLatchEnabled() noexcept {
	return static_cast<bool>((extraMemoryCommit.readGPIOs() >> 6) & 1);
}

bool shouldPerformDataTransmit() noexcept {
	return (extraMemoryCommit.readGPIOs() & 0b1000'0000);
}

bool shouldPerformDataReceive() noexcept {
	return !shouldPerformDataTransmit();
}

bool isReadOperation() noexcept {
	return digitalRead(i960Pinout::W_R_) == LOW;
}
bool isWriteOperation() noexcept {
	return digitalRead(i960Pinout::W_R_) == HIGH;
}
auto getBlastPin() noexcept {
	return digitalRead(i960Pinout::BLAST_);
}
bool isLastBurstTransaction() noexcept {
	return !getBlastPin();
}

void setHOLDPin(decltype(LOW) value) noexcept {
	digitalWrite(5, value, extraMemoryCommit);
}
void setLOCKPin(decltype(LOW) value) noexcept {
	digitalWrite(7, value, extraMemoryCommit);
}


/**
 * FAIL Circuit as defined in the i960 docs but in software instead of
 * hardware.
 */

bool failureOnBootup() noexcept {
	return (getBlastPin() == LOW) && (getByteEnable0() == HIGH &&
									  getByteEnable1() == HIGH);
}

/// @todo add the FAIL pin based off of the diagrams I have (requires external
// circuitry.
uint16_t load(Address address) noexcept {
	Serial.print("Request to load from: 0x");
	Serial.println(address, HEX);
	return 0;
}

void store(Address address, uint16_t value) noexcept {
	Serial.print("Request to store 0x");
	Serial.print(value, HEX);
	Serial.print(" to 0x");
	Serial.println(address, HEX);
}

// State diagram based off of i960SA/SB Reference manual
// Basic Bus States
// Ti - Idle State (where we start)
// Ta - Address State
// Td - Data State
// Tr - Recovery State
// Tw - Wait State

// READY - ~READY asserted
// NOT READY - ~READY not asserted
// BURST - ~BLAST not asserted
// NO BURST - ~BLAST asserted
// NEW REQUEST - ~AS asserted
// NO REQUEST - ~AS not asserted when in 

// Ti -> Ti via no request
// Tr -> Ti via no request
// Tr -> Ta via request pending
// Ti -> Ta via new request
// on enter of Ta, set address state to false
// on enter of Td, burst is sampled
// Ta -> Td
// Td -> Tr after signaling ready and no burst (blast low)
// Td -> Td after signaling ready and burst (blast high)
// Td -> Tw if not ready 
// Tw -> Td if ready and burst (blast high)
// Tw -> Tr after signaling ready and no burst (blast low)

// NOTE: Tw may turn out to be synthetic
constexpr auto NoRequest = 0;
constexpr auto NewRequest = 1;
constexpr auto ReadyAndBurst = 2;
constexpr auto NotReady = 3;
constexpr auto ReadyAndNoBurst = 4;
constexpr auto RequestPending = 5;
constexpr auto ToDataState = 6;
void idleState() noexcept;
void onAddressStateEntered() noexcept;
void doAddressState() noexcept;
void onEnteringDataState() noexcept;
void processDataRequest() noexcept;
void doRecoveryState() noexcept;
State ti(nullptr, idleState, nullptr);
State ta(onAddressStateEntered, doAddressState, nullptr);
State td(onEnteringDataState, processDataRequest, nullptr);
State tr(nullptr, doRecoveryState, nullptr);
Fsm fsm(&ti);
volatile bool asTriggered = false;
volatile bool blastLow = false;
volatile bool denTriggered = false;
volatile uint32_t baseAddress = 0;
volatile uint32_t usedAddress = 0;
volatile uint16_t valueStorage = 0;
volatile bool performingRead = false;
ISR (INT2_vect)
{
	asTriggered = true;
	// this is the AS_ pin doing its thing
}

void idleState() noexcept {
	if (asTriggered) {
		fsm.trigger(NewRequest);
	}
}
void onAddressStateEntered() noexcept {
	Serial.println("Entered Address State");
	asTriggered = false;
}
void doAddressState() noexcept {
	Serial.println("Address State");
	if (digitalRead(i960Pinout::DEN_) == LOW) {
		fsm.trigger(ToDataState);
	}
}

void onEnteringDataState() noexcept {
	Serial.println("Entering Data State");
	denTriggered = false;
}

void signalReady() noexcept {
	digitalWrite(i960Pinout::Ready, LOW);
	digitalWrite(i960Pinout::Ready, HIGH);
	if (getBlastPin() == LOW) {
		// we not in burst mode
		fsm.trigger(ReadyAndNoBurst);
	} else {
		fsm.trigger(ReadyAndBurst);
	}
}

void
addrToDataState() noexcept {
	Serial.println("Address to Data State");
	// when we do the transition, record the information we need
	baseAddress = getAddress();
	usedAddress = getBurstAddress(baseAddress);
	performingRead = isReadOperation();
}

void
dataToDataState_Via_Burst() noexcept {
	Serial.println("Data To Data Via Burst");
	usedAddress = getBurstAddress(baseAddress);
}

void processDataRequest() noexcept {
	Serial.println("Process Data Request");
	if (performingRead) {
		setDataBits(load(usedAddress));
	} else {
		// perform a store
		store(usedAddress, getDataBits());
	}
	// at the end of the day, signal ready on the request
	// get the base address 
	signalReady();
}

void doRecoveryState() noexcept {
	Serial.println("Do Recovery State");
	if (asTriggered) {
		fsm.trigger(RequestPending);
	} else {
		fsm.trigger(NoRequest);
	}
}


void setupBusStateMachine() noexcept {
	Serial.println("Setting up Bus State Machine");
	fsm.add_transition(&ti, &ta, NewRequest, nullptr);
	fsm.add_transition(&ta, &td, ToDataState, addrToDataState);
	fsm.add_transition(&td, &td, ReadyAndBurst, dataToDataState_Via_Burst);
	fsm.add_transition(&td, &tr, ReadyAndNoBurst, nullptr);
	fsm.add_transition(&tr, &ta, RequestPending, nullptr);
	fsm.add_transition(&tr, &ti, NoRequest, nullptr);
}
//State tw(nullptr, nullptr, nullptr); // at this point, this will be synthetic
//as we have no concept of waiting inside of the mcu
void setupCPUInterface() {
	Serial.println("Setting up cpu interface pins...");
	Serial.println("Configure output pins");
	setupPins(OUTPUT,
			i960Pinout::Ready,
			i960Pinout::GPIOSelect,
			i960Pinout::Int0_);
	digitalWriteBlock(HIGH,
			i960Pinout::Ready,
			i960Pinout::GPIOSelect,
			i960Pinout::Int0_);
	setHOLDPin(LOW);
	setLOCKPin(HIGH);
	Serial.println("Setting up inputs");
	setupPins(INPUT,
			i960Pinout::BLAST_,
			i960Pinout::AS_,
			i960Pinout::W_R_,
			i960Pinout::DEN_);
	Serial.println("Setting up interrupts on INT2");
	EIMSK |= 0b100; // enable INT2 pin
	EICRA |= 0b100000; // trigger on falling edge
	Serial.println("Setting up on-board cache...");
	for (int i = 0; i < onBoardCacheSize; ++i) {
		onBoardCache[i] = 0;
	}
}
void setupIOExpanders() {
	// at bootup, the IOExpanders all respond to 0b000 because IOCON.HAEN is
	// disabled. We can send out a single IOCON.HAEN enable message and all
	// should receive it. 
	// so do a begin operation on all chips (0b000)
	dataLines.begin(); 
	// set IOCON.HAEN on all chips
	dataLines.enableHardwareAddressPins();
	// now we have to refresh our on mcu flags for each io expander
	lower16.refreshIOCon();
	upper16.refreshIOCon();
	extraMemoryCommit.refreshIOCon();
	// now all devices tied to this ~CS pin have separate addresses
	// make each of these inputs
	lower16.writeGPIOsDirection(0b11111111'11111111);
	upper16.writeGPIOsDirection(0b11111111'11111111);
	dataLines.writeGPIOsDirection(0b11111111'11111111);
	extraMemoryCommit.writeGPIOsDirection(0b11111111'01011111);
}

void emitCharState(bool condition, char onTrue, char onFalse) noexcept {
	Serial.print(condition ? onTrue : onFalse);
}
	
// the setup routine runs once when you press reset:
void setup() {
	Serial.begin(115200);
	Serial.println("80960Sx Chipset Starting up...");
	setupPins(OUTPUT, 
			i960Pinout::Reset960,
			i960Pinout::Led);
	HoldPinLow<i960Pinout::Reset960> holdi960InReset;
	t.oscillate(static_cast<int>(i960Pinout::Led), 1000, HIGH);
	SPI.begin();
	setupIOExpanders();
	setupCPUInterface();
	/// wait two seconds to ensure that reset is successful
	//setupBusStateMachine();
	Serial.println("Finished starting up!");
	Serial.println("Waiting 2 seconds!");
	delay(2000);
	// At this point the cpu will have started up and we must check out the
	// fail circuit during bootup.
}
volatile int failCount = 0;

void processingLoop() {
	Serial.print(extraMemoryCommit.readGPIOs(), BIN);
	Serial.print(" ");
	emitCharState(digitalRead(i960Pinout::AS_) == LOW, '0', '1');
	emitCharState(getBlastPin() == LOW, '0', '1');
	emitCharState(getByteEnable0() == HIGH, '1', '0');
	emitCharState(getByteEnable1() == HIGH, '1', '0');
	auto failed = failureOnBootup();
	if (failed) {
		++failCount;
	}
	emitCharState(failed, 'F', 'T');
	if (digitalRead(i960Pinout::AS_) == LOW) {
		auto isWriting = isWriteOperation();
		auto isReading = isReadOperation();
		emitCharState(isWriting, 'W', 'R');
		auto address = getAddress();
		Serial.print(" 0x");
		Serial.print(address, HEX);
		if (isReading) {
			setDataBits(load(address));
		} else /* is writing */ {
			store(address, getDataBits());
		}
		signalReady();
	}
	Serial.println();
	delay(100);
}
void doMachineRun() noexcept {
	if (failureOnBootup()) {
		++failCount;
	}
	if (failCount < 2) {
		fsm.run_machine();
	} else {
		Serial.println("BUS FAILURE!");
	}
}
/// @todo implement bootup fail state detection. Probably have to use a discrete circuit
/// 
// the loop routine runs over and over again forever:
void loop() {
	if (failCount < 2) {
		processingLoop();
	}
	t.update();
}
